<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>JesseDownSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player Variables
//Movement
playerSpeed = 4

//Animations
animationSpeed = 0.0666 // 4/60 = ~0.0666 (4 fps in a 60 fps room)
// Used to skip to the next animation frame on first movement.
// Remove if animationSpeed ever becomes 1:1 with room speed
firstMove = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement
// Get Player Input
keyLeft = keyboard_check(ord("A"))
keyRight = keyboard_check(ord("D"))
keyUp = keyboard_check(ord("W"))
keyDown = keyboard_check(ord("S"))

hsp = (-1 * keyLeft) + keyRight
vsp = (-1 * keyUp) + keyDown

mag = sqrt(hsp*hsp + vsp*vsp)
if mag > 0 {
    hsp = round(playerSpeed * hsp/mag)
    vsp = round(playerSpeed * vsp/mag)
}
//Round should always be the last operation on hsp and vsp

if place_meeting(x + hsp, y, WallObject) {
    while(!place_meeting(x + sign(hsp), y, WallObject)) {
        x += sign(hsp)
    }
} else {
    x += hsp
}

if place_meeting(x, y + vsp, WallObject) {
    while(!place_meeting(x, y + sign(vsp), WallObject)) {
        y += sign(vsp)
    }
} else {
    y += vsp
}

// Animations
if hsp == 0 &amp;&amp; vsp == 0 {
    image_index = 0
    image_speed = 0
    firstMove = true
} else {
    // Hacky solution using bool as int to move one animation frame forward on first movement.
    // This is so the player object doesn't look like it's sliding around
    image_index = image_index + firstMove
    firstMove = false

    image_speed = animationSpeed

    if vsp &gt; 0 {
        sprite_index = JesseDownSprite
    } else if vsp &lt; 0 {
        sprite_index = JesseUpSprite
    } else {
        sprite_index = JesseRightSprite
        image_xscale = sign(hsp)
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
