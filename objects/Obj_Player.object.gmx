<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_JesseDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Start

// Set random randomization seed
randomize()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Combat

activeWeapon = undefined
equippedWeapon = Obj_Stick
xWeaponDisplacement = 0
yWeaponDisplacement = 0
attackStaminaDrain = 40
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and Animation

// Player Variables
//Movement
playerSpeed = 3

//Animations
animationDuration = 1 // seconds
// Used to skip to the next animation frame on first movement.
// Remove if animationSpeed ever becomes 1:1 with room speed
firstMove = true

//Combat
maxStamina = 600
stamina = maxStamina

// defines how much higher sprint can go from walk speed (add 1 to get the multiplyer e.g.( 1 = x2, 2 = x3 ))
sprintMultiplyerAddition = 1.25 // This makes it so sprint is slower if stamina is lower, but you can never drop below walk speed
sprintStaminaDrain = 1.5
walkStaminaRegen = 1
restStaminaRegen = 2

// HUD
staminaBarAlpha = 0
staminaBarAlphaDrain = 1/60 // 60 frames to completely disapear

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and Animations

// Movement
// Get Player Input
keyLeft = keyboard_check(ord("A"))
keyRight = keyboard_check(ord("D"))
keyUp = keyboard_check(ord("W"))
keyDown = keyboard_check(ord("S"))

keySprint = keyboard_check(vk_shift)

hsp = (-1 * keyLeft) + keyRight
vsp = (-1 * keyUp) + keyDown

// checks to see if there is a wall blocking the player's path
noBlockingWall = (!place_meeting(x + sign(hsp), y, Par_Wall) &amp;&amp; hsp != 0) || (!place_meeting(x, y + sign(vsp), Par_Wall) &amp;&amp; vsp != 0)
mag = sqrt(hsp*hsp + vsp*vsp)
if mag &gt; 0 &amp;&amp; noBlockingWall {
    // Normalize direction and form velocity vector
    if keySprint &amp;&amp; stamina &gt;= sprintStaminaDrain {
        // get speed multiplyer for sprinting
        sprintMultiplyer = keySprint * (((stamina / maxStamina) * sprintMultiplyerAddition) + 1)

        hsp *= (playerSpeed/mag) * sprintMultiplyer
        vsp *= (playerSpeed/mag) * sprintMultiplyer

        stamina -= sprintStaminaDrain
    } else {
        hsp *= playerSpeed/mag
        vsp *= playerSpeed/mag
        
        // do not gain stamina if stamina is full or currently attacking
        if stamina &lt; maxStamina &amp;&amp; activeWeapon == undefined {
            stamina += walkStaminaRegen
            
            if stamina &gt; maxStamina {
                stamina = maxStamina
            }
        }
    }

    // Convert to integer [Round should always be the last operation on hsp and vsp]
    hsp = round(hsp)
    vsp = round(vsp)
} else if stamina &lt; maxStamina &amp;&amp; activeWeapon == undefined {
    stamina += restStaminaRegen

    if stamina &gt; maxStamina {
        stamina = maxStamina
    }
}


if place_meeting(x + hsp, y, Par_Wall) {
    while(!place_meeting(x + sign(hsp), y, Par_Wall)) {
        x += sign(hsp)
    }
    hsp = 0
} else {
    x += hsp
}

if place_meeting(x, y + vsp, Par_Wall) {
    while(!place_meeting(x, y + sign(vsp), Par_Wall)) {
        y += sign(vsp)
    }
    vsp = 0
} else {
    y += vsp
}

// Squareroot can be done later to find the Post collision speed, used for animations
postCollideSpeed = sqrt(hsp*hsp + vsp*vsp)

// Animations
if postCollideSpeed == 0 {
    image_index = 0
    image_speed = 0
    firstMove = true
} else {
    // Advances animation by one frame on first move to prevent moonwalking
    if firstMove {
        firstMove = false
        image_index = 1
    }
    
    if vsp &gt; 0 {
        sprite_index = Spr_JesseDown
    } else if vsp &lt; 0 {
        sprite_index = Spr_JesseUp
    } else {
        sprite_index = Spr_JesseRight
        image_xscale = sign(hsp)
    }
    
    // image_speed is in sprite frames / room frames
    // animationDuration is in seconds, room_speed is in room frames per second
    speedScale = postCollideSpeed / playerSpeed
    image_speed = (speedScale * sprite_get_number(sprite_index)) / (animationDuration * room_speed)
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Combat

// Player Input
keyEnter = keyboard_check_pressed(vk_enter)

// Weapon Creation and Destruction
if activeWeapon == undefined &amp;&amp; keyEnter &amp;&amp; stamina &gt;= attackStaminaDrain {
    if hsp == 0 &amp;&amp; vsp == 0 { // Jesse standing still
        // currently only attacks left, right, up, and down when standing still
        // add diagonal staning attacks once we get diagonal jesse sprites
        switch sprite_index {
            case Spr_JesseUp:
                xWeaponDisplacement = 0
                yWeaponDisplacement = -1 * (sprite_height/2)
                break
            case Spr_JesseDown:
                xWeaponDisplacement = 0
                yWeaponDisplacement = 1 * (sprite_height/2)
                break
            default:
                xWeaponDisplacement = (sprite_width/2)
                yWeaponDisplacement = 0
                break
        }
    } else { // Jesse moving
        if hsp != 0 {
            xWeaponDisplacement = (sprite_width/2) * sign(hsp) * sign(image_xscale)
        } else {
            xWeaponDisplacement = 0
        }

        if vsp != 0 {
            yWeaponDisplacement = (sprite_height/2) * sign(vsp)
        } else {
            yWeaponDisplacement = 0
        }
    }

    // Create and place weapon object
    activeWeapon = instance_create(x + xWeaponDisplacement, y + yWeaponDisplacement, equippedWeapon)
    stamina -= attackStaminaDrain

    if xWeaponDisplacement != 0 {
        activeWeapon.image_xscale = sign(xWeaponDisplacement)
        activeWeapon.image_angle += (-90 * sign(yWeaponDisplacement)) * (.5 * sign(xWeaponDisplacement))
    } else {
        activeWeapon.image_angle += -90 * sign(yWeaponDisplacement)
    }
} else if activeWeapon != undefined {
    with(activeWeapon) {
        if image_index == (image_number - 1) { // Destroy weapon object on last frame of animation
            instance_destroy()
            other.activeWeapon = undefined
        } else { // Move weapon object with player
            x = other.x + other.xWeaponDisplacement
            y = other.y + other.yWeaponDisplacement
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if stamina &lt; maxStamina {
    staminaBarAlpha = 1
} else if staminaBarAlpha &gt; 0 {
    staminaBarAlpha -= staminaBarAlphaDrain
    
    if staminaBarAlpha &lt; 0 {
        staminaBarAlpha = 0
    }
}

draw_set_alpha(staminaBarAlpha)

staminaRemainingPercentage = (stamina / maxStamina) * 100
draw_healthbar(
    40,
    window_get_height() - 50,
    300,
    window_get_height() - 20,
    staminaRemainingPercentage,
    c_black,
    c_green,
    c_lime,
    0, // drain left
    true,
    true
)

draw_set_alpha(1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
